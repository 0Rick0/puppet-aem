require 'spec_helper'

describe 'aem', :type => :class do

  let :default_facts do
    {
      :kernel     => 'Linux'
    }
  end

  let :title do 'aem' end

  let :default_params do
    {
      :source => '/tmp/aem-quickstart.jar'
    }
  end

  let :env_file_contents do
    <<-CONTENTS
#!/bin/bash
#
# This script is generated by the AEM Puppet module. 
# Do not manually edit this file.
#
# This file manages the configuration of the run script.
#


PORT=4502
TYPE='author'
RUNMODES=''
SAMPLE_CONTENT=''
DEBUG_PORT=



JVM_MEM_OPTS='-Xmx1024m -XX:MaxPermSize=256M'

DEFAULT_JVM_OPTS='-server -Djava.awt.headless=true'
JVM_OPTS=''

SLING_PROPS='conf/sling.properties'

# Do we ever implement these?
#HOST=
#FILE_SIZE_LIMIT

# This doesn't ever seem to work
#LOG_LEVEL=
    CONTENTS
  end

  let :start_monitor_contents do
    <<-CONTENTS
#!/usr/bin/ruby

require 'net/http'

# Checks the system to for a state, loops until it reaches that state

desired_state = ARGV[0] == "off" ? :off : :on

# If context root is not blank, need to ensure URI has a trailing slash,
# otherwise the system redirects, thus shutting down before installation is complete.
uri_s = "http://localhost:4502/"

uri = URI.parse(uri_s)

Timeout.timeout(600) do

  Kernel.loop do
    begin
      response = Net::HTTP.get_response(uri)
      return if ((response.is_a? Net::HTTPSuccess) ||
               (response.is_a? Net::HTTPRedirection)) && desired_state == :on
    rescue
      return if desired_state == :off
    end
    sleep 10
  end
end
    CONTENTS
  end

  context 'default install' do

    let :params do default_params end
    let :facts do default_facts end

    it { is_expected.to compile }

    it { is_expected.to contain_class('aem').with(
      'ensure'                => 'present',
      'group'                 => 'aem',
      'jvm_mem_opts'          => '-Xmx1024m -XX:MaxPermSize=256M',
      'manage_group'          => true,
      'manage_home'           => true,
      'manage_user'           => true,
      'port'                  => 4502,
      'sample_content'        => true,
      'snooze'                => 10,
      'timeout'               => 600,
      'type'                  => 'author',
      'user'                  => 'aem'
      )
    }

    it { is_expected.to contain_user('aem') }
    it { is_expected.to contain_group('aem') }
    
    it { is_expected.to contain_file('/opt/aem').with(
        'ensure'  => 'directory',
        'group'   => 'aem',
        'owner'   => 'aem'
      )
    }

    it { is_expected.to contain_exec('aem unpack').with(
        'command'     => 'java -jar /tmp/aem-quickstart.jar -b /opt/aem -unpack',
        'creates'     => '/opt/aem/crx-quickstart',
        'group'       => 'aem',
        'onlyif'      => ['which java', 'test -f /tmp/aem-quickstart.jar'],
        'user'        => 'aem'
      ).that_requires('File[/opt/aem]')
    }

    it { is_expected.to contain_file('/opt/aem/crx-quickstart/bin/start-env').with(
        'ensure'      => 'file',
        'content'     => env_file_contents,
        'group'       => 'aem',
        'owner'       => 'aem'
      ).that_requires('Exec[aem unpack]')
    }

    it { is_expected.to contain_file('/opt/aem/crx-quickstart/bin/start.orig').with(
        'ensure'      => 'file',
        'group'       => 'aem',
        'source'      => '/opt/aem/crx-quickstart/bin/start',
        'owner'       => 'aem'
      ).that_requires('Exec[aem unpack]')
    }

    it { is_expected.to contain_file('/opt/aem/crx-quickstart/bin/monitor').with(
        'ensure'      => 'file',
        'content'     => start_monitor_contents,
        'group'       => 'aem',
        'owner'       => 'aem'
      ).that_requires('Exec[aem unpack]')
    }

    it { is_expected.to contain_file('/opt/aem/crx-quickstart/bin/start').with(
        'ensure'      => 'file',
        'group'       => 'aem',
        'source'      => 'puppet:///modules/aem/start',
        'owner'       => 'aem'
      ).that_requires('File[/opt/aem/crx-quickstart/bin/start.orig]')
    }

    it { is_expected.to contain_exec('aem start').with(
        'command'     => 'start',
        'creates'     => '/opt/aem/crx-quickstart/repository',
        'group'       => 'aem',
        'path'        => '/opt/aem/crx-quickstart/bin',
        'user'        => 'aem'
      ).that_requires('File[/opt/aem/crx-quickstart/bin/start]')
    }

    it { is_expected.to contain_exec('aem stop').with(
        'command'     => 'stop',
        'group'       => 'aem',
        'onlyif'      => 'monitor on',
        'path'        => '/opt/aem/crx-quickstart/bin',
        'user'        => 'aem'
      ).that_requires('Exec[aem start]')
    }
  end

end