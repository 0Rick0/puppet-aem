require 'spec_helper_acceptance'

describe 'AEM Provider', :unless => UNSUPPORTED_PLATFORMS.include?(fact('osfamily')) do

  before :context do

    env = <<-ENV
#!/bin/bash
#
# This script is generated by the AEM Puppet module. 
# Do not manually edit this file.
#
# This file manages the configuration of the run script.
#

PORT=4502
TYPE='author'
RUNMODES=''
SAMPLE_CONTENT=''
DEBUG_PORT=



JVM_MEM_OPTS='-Xmx1024m -XX:MaxPermSize=256M'

DEFAULT_JVM_OPTS='-server -Djava.awt.headless=true'
JVM_OPTS=''

SLING_PROPS='conf/sling.properties'

# Do we ever implement these?
#HOST=
#FILE_SIZE_LIMIT

# This doesn't ever seem to work
#LOG_LEVEL=
ENV

    pp = <<-MANIFEST
      File { backup => false, owner => 'aem', group => 'aem' }

      group { 'aem' : ensure => 'present' }

      user { 'aem' : ensure => 'present', gid =>  'aem' }

      file { '/opt/faux' :
        ensure          => 'directory',
      }

      file { '/opt/faux/crx-quickstart' :
        ensure          => 'directory',
      }
      file { '/opt/faux/crx-quickstart/bin' :
        ensure        => 'directory',
      }
      file { '/opt/faux/crx-quickstart/bin/start-env' :
        ensure        => 'file',
        content       => "#{env}",
        mode          => '0755',
      }

      file { '/opt/faux/crx-quickstart/bin/start' :
        ensure        => 'file',
        source       => "puppet:///modules/aem/start",
        mode          => '0755',
      }

      file { '/opt/faux/crx-quickstart/bin/start.orig' :
        ensure        => 'file',
        content       => '',
        mode          => '0755',
      }

      file { '/opt/faux/crx-quickstart/repository' :
        ensure        => 'directory',
      }

      file { '/opt/faux/crx-quickstart/app' :
        ensure          => 'directory',
      }

      file { '/opt/faux/crx-quickstart/app/cq-quickstart-6.1.0-standalone.jar' :
        ensure        => 'file',
        content       => '',
      }
    MANIFEST
    apply_manifest(pp, :catch_failures => true)
  end

  after :context do
    pp = <<-MANIFEST
      File { backup => false, }
      file { '/opt/aem' :
        ensure      => 'absent',
        force       => 'true',
      }
      file { '/opt/faux' :
        ensure  => 'absent',
        force   => 'true',
      }
    MANIFEST
    apply_manifest(pp, :catch_failures => true)
  end

  context '#create' do

    let :facts do
      {
        :environment => :root
      }
    end

    it 'should work with no errors' do
      pp = <<-MANIFEST
        File { backup => false, }

        aem::instance { 'aem' :
          source          => '/tmp/aem-quickstart.jar',
        }

        file { '/opt/aem' :
          ensure      => 'directory',
          group       => 'aem',
          owner       => 'aem',
        }

      MANIFEST

      apply_manifest(pp, :catch_failures => true)
      apply_manifest(pp, :catch_changes => true)
    end

    it 'should have unpacked the standalone jar' do
      shell('find /opt/aem/crx-quickstart -name "cq-quickstart-*-standalone*.jar" -type f') do |result|
        expect(result.stdout).to match(%r{^(\S+)/crx-quickstart/app/cq-quickstart-([0-9.]+)-standalone.*\.jar})
      end
    end

    it 'should be owned by specified user/group' do
      shell('stat -c "%U:%G" /opt/aem/crx-quickstart/app/cq-quickstart*.jar') do |result|
        expect(result.stdout).to match('aem:aem')
      end
    end

    it 'should not change existing install' do
      pp = <<-MANIFEST
        File { backup => false, }

        aem::instance { 'existing' :
          ensure      => 'present',
          home        => '/opt/faux',
          source      => '/tmp/aem-quickstart.jar',
        }
      MANIFEST

      apply_manifest(pp, :catch_changes => true)
    end

  end
end